# Complete the 'define_settings_ads_campaigns' function below.

#' Define settings for Ads campaigns based on input 'csv' file
#' @param df_data Data frame with data from 'csv' file
#' @return Data frame with settings for ads campaigns

define_settings_ads_campaigns <- function(df_data) {
  # Replace character column "age" with a numeric column containing the mean value
  df_data$age <- sapply(strsplit(df_data$age, "-"), function(x) mean(as.numeric(x)))

  # Calculate costs per impression, click, and conversion
  df_data$cost_per_impression <- df_data$spent / df_data$impressions
  df_data$cost_per_click <- df_data$spent / df_data$clicks
  df_data$cost_per_conversion <- df_data$spent / df_data$conversions

  # Calculate mean costs per impression, click, and conversion by age and gender
  mean_costs <- aggregate(df_data[c("cost_per_impression", "cost_per_click", "cost_per_conversion")],
                          by = list(age = df_data$age, gender = df_data$gender),
                          FUN = function(x) mean(x, na.rm = TRUE))

  # Remove rows with zero values
  mean_costs <- mean_costs[rowSums(mean_costs[, -c(1, 2)]) != 0, ]

  # Determine the combinations with minimal costs per impression, click, and conversion
  min_costs_impression <- mean_costs[mean_costs$cost_per_impression == min(mean_costs$cost_per_impression), ]
  min_costs_click <- mean_costs[mean_costs$cost_per_click == min(mean_costs$cost_per_click), ]
  min_costs_conversion <- mean_costs[mean_costs$cost_per_conversion == min(mean_costs$cost_per_conversion), ]

  # Create a data frame for the result
  result <- data.frame(
    metric_name = rep(c("mean_cost_per_impressions", "mean_cost_per_clicks", "mean_cost_per_conversions"), 3),
    metric_value = c(min_costs_impression$cost_per_impression, min_costs_click$cost_per_click, min_costs_conversion$cost_per_conversion),
    age = c(min_costs_impression$age, min_costs_click$age, min_costs_conversion$age),
    gender = c(min_costs_impression$gender, min_costs_click$gender, min_costs_conversion$gender)
  )

  # Round the mean values to 5 digits after the decimal point
  result$metric_value <- round(result$metric_value, 5)

  return(result[1:3,])
}



# DO NOT CHANGE THIS CODE

# Open connection
fptr <- file(Sys.getenv("OUTPUT_PATH"))
open(fptr, open = "w")

# Read input 'csv' file
df_input <- read.csv("/dev/stdin", stringsAsFactors = FALSE)

# Process result data set
df_output <- define_settings_ads_campaigns(df_input)

# Save results as 'csv' file 
write.csv(df_output, fptr, row.names = FALSE)

# Close connection
close(fptr)
